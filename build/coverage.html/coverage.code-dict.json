{"/home/travis/build/npmtest/node-npmtest-multilabelsvm/test.js":"/* istanbul instrument in package npmtest_multilabelsvm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multilabelsvm/lib.npmtest_multilabelsvm.js":"/* istanbul instrument in package npmtest_multilabelsvm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_multilabelsvm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_multilabelsvm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-multilabelsvm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-multilabelsvm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_multilabelsvm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_multilabelsvm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_multilabelsvm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_multilabelsvm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_multilabelsvm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_multilabelsvm.__dirname + '/lib.npmtest_multilabelsvm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multilabelsvm/node_modules/multilabelsvm/lib/multilabelsvm.js":"if(typeof process === 'object' && process + '' === '[object process]')//checking if its nodejs/browser\nvar svmjs = require(\"svm\");\n//bag of words\nvar Classifier = (function(exports,svm){\nvar bag = function(options){\n\n\tthis.features = [];//features detects from training set.\n\toptions =  options||{}\n\tthis.ngrams = options.ngrams|| 1 ;//it group words together as ngrams value specified.\n\tthis.casesensitive = options.casesensitive || false; //case sensitivity of words\n\t\t\t\t\t \n}\n\n//adding new feature to the features array.\n//doc should be array.\nbag.prototype.addFeatures = function( doc){\n\n this.features = doc.reduce(function(features , currentValue ) {\n\n\tif (features.indexOf(currentValue) < 0 ) features.push(currentValue);\n\treturn features;\n\t\n},this.features);\n\n}\n\n//this will add string features.first convert to array then adding to featues.\nbag.prototype.addStringFeatures = function( doc){\n\n\tthis.addFeatures(this.str2arr(doc));\n\n}\n\n//given document to array.\n//it take care of the case sensitivity,ngrams options.\n//code inspired by limdu. (npm limdu)\nbag.prototype.str2arr = function( document){\n\n\tif(!this.casesensitive) \n\t\tdocument=document.toLowerCase();\n\n\tgrams = document.split(/[ \\t,;:.!?]/).filter(function(a){return !!a});\n\tvar doc=[];\n\tfor (var i=0; i<=grams.length-this.ngrams; ++i) {\n\t\tsliceOfWords = grams.slice(i, i+this.ngrams);\n\t\tdoc.push(sliceOfWords.join(\"_\"));\n\t\t\t\n\t}\n\treturn doc;\n}\n\n//this function converts given document array to feature vector\nbag.prototype.createFeatureVector = function( doc ){\n\t\nvar features ={}\n\tfor (var i in this.features)\n\t\tfeatures[this.features[i]] = 0;\n\n\tfor(var i in doc){\n\t\tif(features[doc[i]] > -1 )//eliminates unknown feature\n\t\tfeatures[doc[i]] ++;\n\t}\n//console.log(this.features);\n\tvar featureVector = []\t\n\tfor(var i in features){\n\t\tfeatureVector.push(features[i]);\n\t\t}\n//console.log(featureVector);\nreturn\tfeatureVector;\n \t\n}\n\n//helper function to avoid repeaated values in an array\nbag.prototype.unique = function(arr){\n\n\treturn arr.reduce(function(a,b){\n\t\tif (a.indexOf(b) < 0 ) a.push(b);\n\t\treturn a;\n\t  },[]);\n  \n}\n//end of bag\n\n\nfunction Classifier(options)\n{ \n\nthis.labels = [];\nthis.classfiers= {};\noptions = options || {}\noptions.feature = options.feature||{}\nthis.bag = new bag(options.feature);\nthis.options=options ||{\n\tC : 1.0,\n\ttol : 1e-4, \n\talphatol : 1e-7,\n\tmaxiter : 10000,\n\tkernel : 'rbf', \n\trbfsigma :  0.5,\n\tnumpasses : 100,\n};\t\t\n\n\n\t//creating each classifiers for each label\n\tthis.createClassifiers = function(){\n\t\t\tfor(var i in this.labels )\n\t\t\tthis.classfiers[this.labels[i]] = new svm.SVM();\n\t\t\n\t\n\t}//end of createClassifiers  \n\t\n\t//initialize classifier by taking data from the training set.\n\tthis.initializeClassifiers = function(data){\n\t\tfor( var i in data){\t\t\n\t\t\tthis.bag.addStringFeatures(data[i].input);\n\t\t\tthis.labels.push(data[i].output);\n\t\t}\t\n\t\t\n\t\t\n\t\tthis.labels = this.bag.unique(this.labels);\n\t\tthis.createClassifiers(this.labels);\n\t\t\n\t}\n\t\n\n\tthis.trainBatch = function(data){\n\t\n\t\tthis.initializeClassifiers(data);\n\t\tfor( var c in this.classfiers){\n\t\t\tvar trainSet = [];\n\t\t\tvar labels = [];\n\t\n\t\t\tfor( var i in data){\n\t\t\t\ttrainSet.push(this.bag.createFeatureVector(this.bag.str2arr(data[i].input)));//creating featurevector foreach document.\t\t\t \n\t\t\t\tif(c == data[i].output) //keeping binary \n\t\t\t\t\tlabels.push(1)\n\t\t\t\telse\n\t\t\t\t\tlabels.push(-1);\n\t\t\n\t\t\t}\n\t\t\t//console.log(trainSet ,labels);\n\t\tthis.classfiers[c].train(trainSet,labels,this.options);\t\n\t\t}\n\n\t}\n\t//end of train batch.\n\t\n\t//classification classify each classifiers and combine their result into single class.\n\tthis.classify=function(text){\n\t\n\tfeature = this.bag.createFeatureVector(this.bag.str2arr(text))\n\tvar\tresult ={}\t\t\t\n\tvar prediction=[];\n\tfor( var c in this.classfiers){\n\t\tresult[c] = this.classfiers[c].marginOne(feature);\n\t\t\t\t\t\t\t\t\n\t}\n\treturn (this.getMaxFvalue(result));\t\n\t\n\t}//end of classify\n\n\t//gets maximum value of prediction.\n\tthis.getMaxFvalue = function(obj){\n\tmax = -1;\n\tlabel='0' \n\t\tfor(var i in obj){\n\t\t\tif(obj[i] > max ){\n\t\t\t\tmax = obj[i];\n\t\t\t\tlabel =i;\n\t\t\t}\n\t\t}\n\treturn label;\n\t}\n\t\n\tthis.fromJSON=function(json){\n\t\n\t\n\tfor(var j in json.cfiers)\n\t\tthis.labels.push(j);\n\t\t\n\tthis.createClassifiers(this.labels);\n\t//importing classsifiers\n\tfor( var c in this.classfiers)\n\t\tthis.classfiers[c].fromJSON(json['cfiers'][c]);\n\t//importing bag model\t\n\tfor(var b in json.bag)\n\t\tthis.bag[b] = json.bag[b];\n\t\t\n\t}\n\tthis.toJSON=function(){\n\t\tvar json = {'bag':{},'cfiers':{}};\t\n\t\t//exporting classifiers keyed by label.\n\t\tfor( var c in this.classfiers)\n\t\t\tjson['cfiers'][c] =  this.classfiers[c].toJSON();\t\n\t\t//exporting bag \t\n\t\tjson['bag']['features'] = this.bag.features;\n\t\tjson['bag']['ngrams'] = this.bag.ngrams;\n\t\tjson['bag']['casesensitive'] = this.bag.casesensitive;\t\t\n\t\t\n\t\treturn json;\t\t\n\t}\n\n}\n\nexports = exports || {};\nexports.Classifier = Classifier;\nreturn exports;\n})(typeof module != 'undefined' && module.exports,svmjs)\n\n\n\n\n\n\n\n\n\n","/home/travis/build/npmtest/node-npmtest-multilabelsvm/node_modules/multilabelsvm/c.js":"var multilabel = require('./lib/multilabelsvm' );\nvar actionClassifier = new multilabel.Classifier({kernel : 'rbf'});\nvar trainSet = [\n{ input:'What is your name',output: \"name\" },\n{ input:'how are you',output: \"fine\"},\n{ input:'please tell your name please',output: \"name\" },\n{ input:'your name please',output: \"name\" },\n{ input:'what is your name',output: \"name\" },\n{ input:'who am i',output: \"listener\" },\n{ input:'do you know my name',output: \"listener\" },\n{ input:'what is my name',output: \"listener\" },\n{ input:'do you know about me',output: \"listener\" },\n{ input:'do you know my name',output: \"listener\" },\n{ input:'do you know me',output: \"listener\" },\n{ input:'your age',output: \"age\" },\n{ input:'who are you ',output: \"name\" },\n{ input:'may i know your name',output: \"name\" },\n{ input:'your name',output: \"name\" },\n{ input:'where you your',output: \"about\" },\n{ input:'how do you do',output: \"fine\" },\n{ input:'how are you doing',output: \"fine\"},\n{ input:'how are you',output: \"fine\"},\n{ input:'how do you do',output: \"fine\"},\n{ input:'how are you',output: \"fine\"},\n{ input:'are you fine',output: \"fine\"},\n{ input:'how do you feel',output: \"fine\"},\n{ input:'what do you do',output: \"fine\"},\n{ input:'can you edit this',output: \"edit\"},\n{ input:'can you change my name',output:\"change\"},\n{ input:'i dont know what to do',output: \"help\" },\n{ input:'what should i do',output: \"help\" },\n{ input:'could you repeat it',output: \"repeat\" },\n{ input:'can you repeat',output: \"repeat\" },\n{ input:'can you please repeat it',output: \"repeat\" },\n{ input:'please repeat it',output: \"repeat\" },\n{ input:'please repeat again',output: \"repeat\" },\n{ input:'repeat',output: \"repeat\" },\n{ input:'tell once again',output: \"repeat\" },\n{ input:'i dont want to repeat it',output: \"fine\" },\n{ input:'tell once more',output: \"repeat\" },\n{ input:'can you please check it',output: \"check\" }\n]\n\nactionClassifier.trainBatch(trainSet);\n\n//console.log(actionClassifier.bag.features);\n\nconsole.log(actionClassifier.classify('do you repeat'))\nconsole.log(actionClassifier.classify('who are you'))\nconsole.log(actionClassifier.classify('how are you'))\nconsole.log(actionClassifier.classify('what is my name'))\n//backing up\nvar json = actionClassifier.toJSON()\nvar newActionClassifier = new multilabel.Classifier();\nconsole.log('----------New Classifier----');\n//importing\nnewActionClassifier.fromJSON(json);\nconsole.log(newActionClassifier.classify('how are you'));\nconsole.log(newActionClassifier.classify('who are you'));\nconsole.log(newActionClassifier.classify('please repeat again'))\n"}